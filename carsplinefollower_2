//차, 차선 offset 기능 업데이트



using UnityEngine;

[RequireComponent(typeof(LineRenderer))]
public class CarSplineFollower : MonoBehaviour
{
    public Transform[] splinePoints;      // 스플라인 점들
    public float speed = 5f;              // 자동차 속도
    public float carOffset = 0f;          // 자동차의 선 기준 좌우 위치 (음수: 왼쪽, 양수: 오른쪽)
    public float skidmarksOffset = 0f;    // 스키드 마크의 자동차 기준 좌우 위치 (음수: 왼쪽, 양수: 오른쪽)
    public float fixedY = 0.01f;          // Y 값을 고정시키는 값
    public float skidMarkWidth = 0.1f;    // 스키드 마크 폭
    public float offsetChangeSpeed = 2f;  // 오프셋 변경 속도
    private float t = 0f;                 // 경로 상에서 자동차의 위치
    private LineRenderer lineRenderer;    // 선을 그릴 LineRenderer

    private void Start()
    {
        // LineRenderer 초기화
        lineRenderer = GetComponent<LineRenderer>();
        lineRenderer.startWidth = skidMarkWidth;
        lineRenderer.endWidth = skidMarkWidth;
        lineRenderer.positionCount = 0; // 초기 점 개수는 0
    }

    private void Update()
    {
        if (splinePoints == null || splinePoints.Length < 4)
        {
            UnityEngine.Debug.LogError("스플라인 점은 최소 4개 이상 필요합니다.");
            return;
        }

        // 사용자 입력 처리 (carOffset 조정)
        HandleInput();

        // t 값을 시간에 따라 증가시키며 경로를 따라 이동
        t += speed * Time.deltaTime / splinePoints.Length;
        t = Mathf.Repeat(t, 1f); // t 값이 0~1 사이를 반복

        // Hermite 스플라인 기반으로 자동차 위치 및 방향 계산
        Vector3 targetPosition = GetPositionOnSpline(t);
        Vector3 direction = GetDirectionOnSpline(t);

        // 자동차의 이동 방향에 따른 수평 이동 적용 (carOffset)
        Vector3 rightOffsetCar = Vector3.Cross(direction, Vector3.up).normalized * carOffset;
        Vector3 finalPositionCar = targetPosition + rightOffsetCar;

        // 자동차 위치 및 회전 업데이트
        finalPositionCar.y = fixedY; // Y 값 고정
        transform.position = finalPositionCar;
        transform.rotation = Quaternion.LookRotation(direction);

        // 스키드 마크 위치 계산 (skidmarksOffset 사용, 자동차를 기준으로 조정)
        Vector3 skidOffset = Vector3.Cross(direction, Vector3.up).normalized * skidmarksOffset;
        Vector3 skidPosition = finalPositionCar + skidOffset; // 자동차 기준 좌우 이동
        skidPosition.y = fixedY; // Y 값 고정

        // 스키드 마크 업데이트
        AddSkidMark(skidPosition);
    }

    // Hermite Spline 기반 경로 상의 위치 계산
    private Vector3 GetPositionOnSpline(float t)
    {
        int numPoints = splinePoints.Length;
        int p0Index = Mathf.FloorToInt(t * numPoints) % numPoints;
        int p1Index = (p0Index + 1) % numPoints;
        int p2Index = (p0Index + 2) % numPoints;
        int p3Index = (p0Index + 3) % numPoints;

        float localT = (t * numPoints) - p0Index;

        return GetHermiteInternal(
            splinePoints[p0Index].position,
            splinePoints[p1Index].position,
            splinePoints[p2Index].position,
            splinePoints[p3Index].position,
            localT
        );
    }

    // Hermite Spline 기반 경로 상의 방향 계산
    private Vector3 GetDirectionOnSpline(float t)
    {
        float delta = 0.001f; // 작은 값을 사용하여 방향 벡터 계산
        Vector3 position1 = GetPositionOnSpline(t);
        Vector3 position2 = GetPositionOnSpline(Mathf.Repeat(t + delta, 1f));

        return (position2 - position1).normalized;
    }

    // Hermite 스플라인 계산 메서드
    private Vector3 GetHermiteInternal(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t)
    {
        float t2 = t * t;
        float t3 = t2 * t;

        float h00 = 2f * t3 - 3f * t2 + 1f; // Hermite basis function h00
        float h10 = t3 - 2f * t2 + t;      // Hermite basis function h10
        float h01 = -2f * t3 + 3f * t2;    // Hermite basis function h01
        float h11 = t3 - t2;               // Hermite basis function h11

        Vector3 m0 = 0.5f * (p2 - p0);     // Tangent at p1
        Vector3 m1 = 0.5f * (p3 - p1);     // Tangent at p2

        return h00 * p1 + h10 * m0 + h01 * p2 + h11 * m1;
    }

    // 스키드 마크 점 추가 메서드
    private void AddSkidMark(Vector3 skidPosition)
    {
        int currentCount = lineRenderer.positionCount;
        lineRenderer.positionCount = currentCount + 1; // 새로운 점 추가
        lineRenderer.SetPosition(currentCount, skidPosition); // 새로운 점 설정
    }

    // 사용자 입력 처리
    private void HandleInput()
    {
        // 왼쪽 화살표 또는 A 키로 carOffset 감소
        if (Input.GetKey(KeyCode.LeftArrow) || Input.GetKey(KeyCode.A))
        {
            carOffset -= offsetChangeSpeed * Time.deltaTime;
        }
        // 오른쪽 화살표 또는 D 키로 carOffset 증가
        if (Input.GetKey(KeyCode.RightArrow) || Input.GetKey(KeyCode.D))
        {
            carOffset += offsetChangeSpeed * Time.deltaTime;
        }

        // carOffset 범위 제한 (원하는 범위를 설정 가능)
        carOffset = Mathf.Clamp(carOffset, -30f, 30f); // 예: -3 ~ 3 범위로 제한

        // skidmarksOffset은 carOffset 값에 따라 움직임 (자동차 기준)
        skidmarksOffset = Mathf.Clamp(skidmarksOffset, -15f, 15f); // 동일한 범위를 사용할 경우
    }
}
